{"name":"Vmstools","tagline":"VMStools R package page to analyse VMS and Logbook data","body":"# What VMStools can do for you #\r\n\r\n## Introduction ##\r\n\r\nVmstools is an open-source software package build in R. It is specifically developed to process, analyse and visualize logbooks and VMS data.\r\n\r\n### Details ###\r\nSome of its functionality:\r\n  * Analyses use standardised data formats for logbook (EFLALO) and VMS (TACSAT)\r\n  * Handles erroneous data point detection and removal\r\n  * MÃ©tier identification through the use of clustering techniques\r\n  * Link logbook and VMS data together in order to distinguish fishing from other activities\r\n  * Provide high-resolution maps of both fishing effort and -landings, interpolate vessel tracks\r\n  * Calculate indicators of fishing impact as listed under the Data Collection Framework at different spatio-temporal scales.\r\n  * Prepare data for FishFrame submission\r\n  * Link other spatial data to VMS and logbook data\r\n\r\n## System Requirements ##\r\nYou will need the following software to use the VMStools software and repository.\r\n\r\n  * R (version 2.14.x or 2.15.x) for your system. Available [here](http://www.r-project.org).\r\n  * The VMStools package itself, available for download [here](http://code.google.com/p/vmstools/downloads/)\r\n  * For very enthusiastic users / developers: An SVN (subversion) client. For Windows users, we recommend TortoiseSVN. Linux users will typically have access to such a client through their package distribution system.\r\n  * Some way to write and edit R code. For Windows, try RStudio or Tinn-R. For Linux, you almost certaintly already have Vi\r\n\r\n## Getting the Code for enthusiastic users / developers ##\r\nOnce you've got all the necessary bits and pieces, the next step is to fetch a \"working copy\" of the VMStools repository from the server. The SVN client that you have installed takes care of this. The general process is client specific, but generally involves two steps\r\n  1. Create a directory for your working copy (e.g. Desktop/VMStools) and\r\n  1. \"Checking out\" the repository.\r\n\r\nWe'll assume you can handle 1 and 2. yourself, but number 3. is a bit trickier, and is of course dependent on your SVN client. There are a number of good resources available e.g. for windows\r\n\r\nFirstly there are two different ways to checkout the code, depending on whether you want to commit the changes back to the repository or not. If you checkout the repository from http://vmstools.googlecode.com/svn/trunk/ it will not be possible to commit your changes back - however, the benefit is that anyone can get access to the repository, without the need for a google account.\r\nAlternatively, you can check out the code from https://vmstools.googlecode.com/svn/trunk/ (note the https, rather than http), in which case you will be able to commit your changes back. The disadvantage is that this requires a google account (e.g. gmail.com).\r\nFinally, there is a wee trap for beginners when logging in for the first time - make sure that you use the password for the project that googlecode supplies you - not your login password to google itself (slightly counter-intuitive, I know)!\r\n\r\n## Installing the VMStools package ##\r\nDownload the VMStools zip or rar file from the repository under the download tab or build it yourself from the repository. Please note that the VMStools package depends on a number of other R packages. They are listed in the DESCRIPTION file in /trunk of the repository.\r\nThe packages VMStools depends on can easily be installed through:\r\n```\r\nvmstoolsPackages <-  c(\"cluster\",\"data.table\",\"doBy\",\"maps\",\"mapdata\",\"maptools\",\"PBSmapping\",\"sp\")\r\n\r\nfor(i in vmstoolsPackages)       try(install.packages(pkgs=i,repos=getOption(\"repos\")))```\r\n\r\nOnce you've installed all secondary packages install VMStools using ```\r\ninstall.packages(\"yourPath/vmstools.zip\")```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}